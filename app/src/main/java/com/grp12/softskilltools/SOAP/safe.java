package com.grp12.softskilltools.SOAP;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/13/2017 3:12:55 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.grp12.softskilltools.SOAP.Vectorbelbin;
import com.grp12.softskilltools.SOAP.Vectordisc;
import com.grp12.softskilltools.SOAP.Vectorthreesixty;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class safe implements KvmSerializable {
    
    public int safeSize;
    public Vectorbelbin unusedBelbinItems;
    public Vectordisc unusedDiscItems;
    public Vectorthreesixty unusedThreeSixtyItems;
    public Vectorbelbin usedBelbinItems;
    public Vectordisc usedDiscItems;
    public Vectorthreesixty usedThreeSixtyItems;
    
    public safe(){}
    
    public safe(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("safeSize"))
        {
            Object obj = soapObject.getProperty("safeSize");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                safeSize = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                safeSize = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("unusedBelbinItems"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("unusedBelbinItems");
            unusedBelbinItems = new Vectorbelbin(j);
        }
        if (soapObject.hasProperty("unusedDiscItems"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("unusedDiscItems");
            unusedDiscItems = new Vectordisc(j);
        }
        if (soapObject.hasProperty("unusedThreeSixtyItems"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("unusedThreeSixtyItems");
            unusedThreeSixtyItems = new Vectorthreesixty(j);
        }
        if (soapObject.hasProperty("usedBelbinItems"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("usedBelbinItems");
            usedBelbinItems = new Vectorbelbin(j);
        }
        if (soapObject.hasProperty("usedDiscItems"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("usedDiscItems");
            usedDiscItems = new Vectordisc(j);
        }
        if (soapObject.hasProperty("usedThreeSixtyItems"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("usedThreeSixtyItems");
            usedThreeSixtyItems = new Vectorthreesixty(j);
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return safeSize;
            case 1:
                return unusedBelbinItems;
            case 2:
                return unusedDiscItems;
            case 3:
                return unusedThreeSixtyItems;
            case 4:
                return usedBelbinItems;
            case 5:
                return usedDiscItems;
            case 6:
                return usedThreeSixtyItems;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 7;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "safeSize";
                break;
            case 1:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "unusedBelbinItems";
                break;
            case 2:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "unusedDiscItems";
                break;
            case 3:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "unusedThreeSixtyItems";
                break;
            case 4:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "usedBelbinItems";
                break;
            case 5:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "usedDiscItems";
                break;
            case 6:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "usedThreeSixtyItems";
                break;
        }
    }
    

    public String getInnerText() {
        return null;
    }
    
    

    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
